<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = -1;

xMov = 0;
yMov = 0;
spdMax = 5;
acc = .1;
rot = 4;

key_shoot = ord("Z");
key_up = vk_up;
key_left = vk_left;
key_right = vk_right;
key_down = vk_down;

shootTimeCap = room_speed / 5;
shootTime = shootTimeCap;

deathTimeCap = room_speed * 2;
deathTime = deathTimeCap;

points = 0;

gameTime = 0;

image_angle = irandom(359);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!pause)
{
    if (deathTime &lt; deathTimeCap)
    {
        with (obj_bullet)
            instance_destroy();
        deathTime--;
        if (deathTime &lt; 0)
            room_restart();
    }
    else
    {
        gameTime++;
        
        var up = keyboard_check(key_up);
        var down = keyboard_check(key_down);
        
        if (up &amp;&amp; down)
        {
            up = false;
            down = false;
        }
        
        var left = keyboard_check(key_left);
        var right = keyboard_check(key_right);
        
        if (left &amp;&amp; right)
        {
            left = false;
            right = false;
        }
        
        if (up)
        {
            xMov += lengthdir_x(acc, image_angle);
            xMov = clamp(xMov, -spdMax, spdMax);
            
            yMov += lengthdir_y(acc, image_angle);
            yMov = clamp(yMov, -spdMax, spdMax);
        }
        
        if (down &amp;&amp; false)
        {
            xMov -= lengthdir_x(acc, image_angle);
            xMov = clamp(xMov, -spdMax, spdMax);
            
            yMov -= lengthdir_y(acc, image_angle);
            yMov = clamp(yMov, -spdMax, spdMax);
        }
        
        if (left)
            image_angle += rot;
        
        if (right)
            image_angle -= rot;
        
        x += xMov;
        y += yMov;
        
        if (x &gt; room_width + sprite_width / 2)
            x -= room_width + sprite_width * 3 / 2;
        
        if (x &lt; -sprite_width / 2)
            x += room_width + sprite_width * 3/ 2;
        
        if (y &gt; room_height + sprite_height / 2)
            y -= room_height + sprite_height * 3 / 2;
        
        if (y &lt; -sprite_height / 2)
            y += room_height + sprite_height * 3/ 2;
        
        if (shootTime &lt; shootTimeCap)
        {
            shootTime--;
            if (shootTime &lt;= 0)
                shootTime = shootTimeCap;
        }
        
        if ((keyboard_check(key_shoot) || keyboard_check(ord("X"))) &amp;&amp; shootTime == shootTimeCap)
        {
            var laser = instance_create(x + lengthdir_x(sprite_width / 2, image_angle), y + lengthdir_y(sprite_width / 2, image_angle), obj_laser);
            laser.image_angle = image_angle;
            
            shootTime--;
            
            audio_play_sound(snd_shoot, 0, false);
        }
        
        if (placeMeeting(x, y, obj_enemy))
        {
            deathTime--;
            audio_play_sound(snd_death, 0, false);
        }
        
        var rand = irandom(room_speed * 10);
        var spawn = false;
        var spawn1 = false;
        
        if (gameTime &lt; room_speed * 10)
        {
            if (rand &lt; 0)
                spawn1 = true;
            else if (rand &lt; 3)
                spawn = true;
        }
        else if (gameTime &lt; room_speed * 20)
        {
            if (rand &lt; 1)
                spawn1 = true;
            else if (rand &lt; 4)
                spawn = true;
        }
        else if (gameTime &lt; room_speed * 30)
        {
            if (rand &lt; 1)
                spawn1 = true;
            else if (rand &lt; 5)
                spawn = true;
        }
        else if (gameTime &lt; room_speed * 45)
        {
            if (rand &lt; 2)
                spawn1 = true;
            else if (rand &lt; 7)
                spawn = true;
        }
        else
        {
            if (rand &lt; 3)
                spawn1 = true;
            else if (rand &lt; 9)
                spawn = true;
        }
        
        if (spawn)
        {
            var side = irandom(2);
            switch (side)
            {
                case 0:
                    var ast = instance_create(irandom(room_width), -sprite_get_height(spr_asteroid) / 2, obj_asteroid);
                    break;
                case 1:
                    var ast = instance_create(-sprite_get_width(spr_asteroid) / 2, irandom(room_height), obj_asteroid);
                    break;
            }
        }
        
        if (spawn1)
        {
            var side = irandom(2);
            switch (side)
            {
                case 0:
                    var ast = instance_create(irandom(room_width), -sprite_get_height(spr_asteroid) / 2, obj_honing);
                    break;
                case 1:
                    var ast = instance_create(-sprite_get_width(spr_asteroid) / 2, irandom(room_height), obj_honing);
                    break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (deathTime == deathTimeCap)
    draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
