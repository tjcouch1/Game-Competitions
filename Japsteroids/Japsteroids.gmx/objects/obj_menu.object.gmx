<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar pause;
pause = false;

help = 0;
helpTime = room_speed / 2;

player = -1;

audio_play_sound(snd_music, 1, true);

instance_create(room_width / 2, room_height / 2, obj_japan);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == room_menu)
{
    if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
        game_end();
    else if (keyboard_check_pressed(vk_anykey))
        room_goto(room_play);
}
else
{
    if (help == 0)
    {
        pause = true;
        helpTime--;
        
        if (helpTime &lt; 0)
            help = 1;
    }
    
    if (help == 1)
        if (keyboard_check_pressed(vk_backspace))
            room_goto(room_menu);
        else if ((pause &amp;&amp; keyboard_check_pressed(vk_anykey)) || (!pause &amp;&amp; keyboard_check_pressed(vk_escape)))
            pause = !pause;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == room_play)
{
    player = instance_create(room_width / 2, room_height / 2, obj_player);
    player.owner = id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_default);
if (room == room_menu)
{
    draw_sprite(spr_logo, 0, room_width / 2, room_height / 3);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    draw_text(room_width / 2, room_height / 2, "Shoot Asteroids out of space above Japan!#Press any button to start!");
    
    drawReset();
}
else
{
    if (pause)
    {
        draw_set_alpha(.5);
        
        draw_rectangle(0, 0, room_width, room_height, false);
        
        drawReset();
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        
        draw_set_color(c_white);
        draw_text(room_width / 2, room_height / 2, "Z or X - Shoot#Arrow Keys - Move#Backspace - Quit#Any Button - Play");
        
        drawReset();
    }
    
    draw_set_valign(fa_bottom);
    
    draw_text(0, room_height, "Score: " + string(player.points));
    if (player.deathTime &lt; player.deathTimeCap)
    {
        draw_set_font(font_large);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(room_width / 2, room_height / 2, "Score: " + string(player.points));
        drawReset();
    }
        
    
    drawReset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
