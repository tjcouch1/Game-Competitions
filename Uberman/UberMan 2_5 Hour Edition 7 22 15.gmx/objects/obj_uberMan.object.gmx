<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_uberManS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//control vars
key_up = vk_up;
key_down = vk_down;
key_left = vk_left;
key_right = vk_right;
key_jump = ord("Z");
key_run = ord("X");

image_speed = 0;

//action vars
grounded = true;
run = false;
hAcc = .15;
hAccRun = .15;
hSpd = 2;
hSpdRun = 3;
hSpdCap = hSpd;
hDecay = .7;
hDecayAir = .9;
xMov = 0;
jumpTimeCap = room_speed / 6;
jumpTime = jumpTimeCap;
vSpd = -3;
vSpdFall = 4;
vGrav = .25;
vAcc = vSpd;//jump acc
yMov = 0;

check = -1;
coins = 0;

//hp vars
deaths = 2;
hp = 1;
deathTimeCap = room_speed * 2;
deathTime = deathTimeCap;
invincibleTimeCap = room_speed;
invincibleTime = invincibleTimeCap;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!pause)
{
    if (!place_meeting(x + xMov, y, obj_block))
    {
        if (xMov == 0 &amp;&amp; !place_meeting(round(x), y, obj_block))
            x = round(x);
        x += xMov;
    }
    else
    {
        x = round(x);
        
        var side = 1;
        if (xMov &lt; 0)
            side = -1;
        
        while (!place_meeting(x + side, y, obj_block))
            x += side;
        
        xMov = 0;
    }
    
    if (!place_meeting(x, y + round(yMov), obj_block))
        y += round(yMov);
    else
    {
        var b = instance_place(x, y + round(yMov), obj_blockM);
        if (b &gt;= 0 &amp;&amp; b.coin &gt; 0)
        {
            b.coin--;
            var c = instance_create(b.x + b.sprite_width / 2, b.y, obj_coin);
            c.yMov = -1;
            c.life = room_speed / 2;
            coins++;
            if (b.coin == 0)
                b.sprite_index = spr_block;
        }
        y = round(y);
        
        var side = 1;
        if (yMov &lt; 0)
            side = -1;
        
        while (!place_meeting(x, y + side, obj_block))
            y += side;
        
        yMov = 0;
        jumpTime = 0;
    }
    x = clamp(x, 0, room_width);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!pause)
{
    //controls
    var up = false;
    var down = false;
    var left = false;
    var right = false;
    
    if (keyboard_check(key_up))
        up = true;
    if (keyboard_check(key_down))
        down = true;
    if (up &amp;&amp; down)
    {
        down = false;
        up = false;
    }
    
    if (keyboard_check(key_left))
        left = true;
    if (keyboard_check(key_right))
        right = true;
    if (left &amp;&amp; right)
    {
        right = false;
        left = false;
    }
    
    if (keyboard_check(key_run))
        run = true;
    else run = false;
    
    //vertical
    if (place_meeting(x, y + 1, obj_block))
        grounded = true;
    else grounded = false;
    if (keyboard_check_pressed(key_jump) &amp;&amp; grounded)
    {
        jumpTime--;
        grounded = false;
    }
            
    if (!grounded)
    {
        if (jumpTime &lt; jumpTimeCap &amp;&amp; jumpTime &gt; 0)
        {
            if (keyboard_check(key_jump))
            {
                jumpTime--;
                yMov += vAcc;
                yMov = clamp(yMov, 0, vSpd);
            }
            else jumpTime = 0;
        }
        else
        {
            yMov += vGrav;
            yMov = clamp(yMov, vSpd, vSpdFall);
        }
    }
    else if (!keyboard_check(key_jump))
            jumpTime = jumpTimeCap;
        else jumpTime = 0;
    
    //horizontal
    if (left || right)
    {
        var hPlus = hAcc;
        if (run)
            hPlus = hAccRun;
        if (left)
        {
            xMov -= hPlus;
            image_xscale = -1;
        }
        else
        {
            xMov += hPlus;
            image_xscale = 1;
        }
        var hSpdMax = hSpd;
        if (run)
            hSpdMax = hSpdRun;
        xMov = clamp(xMov, -hSpdMax, hSpdMax);
        if (place_meeting(x + xMov, y, obj_block))
            xMov = 0;
            
        image_speed = 1 / 4;
    }
    else
    {
        if (grounded)
            xMov *= hDecay;
        else
            xMov *= hDecayAir;
        if (abs(xMov) &lt; .1)
            xMov = 0;
        image_speed = 0;
        image_index = 0;
    }
    
    if (y &gt; room_height &amp;&amp; deathTime == deathTimeCap)
    {
        hp = 0;
        deathTime--;
        audio_play_sound(snd_death, 1, false);
    }
    
    if (deathTime &lt; deathTimeCap)
    {
        xMov = 0;
        yMov = 0;
        image_alpha = 0;
        deathTime--;
        if (deathTime &lt;= 0)
        {
            if (deaths &gt; 0)
                deaths--;
            else
            {
                deaths = 2;
                check = -1;
            }
            x = xstart;
            y = ystart;
            if (check &gt;= 0)
            {
                x = check.x;
                y = check.y;
            }
            hp = 1;
            deathTime = deathTimeCap;
            image_alpha = 1;
            invincibleTime = invincibleTimeCap - 1;
            if (deaths == 2)
                room_goto(room1);
        }
    }
    
    if (invincibleTime &lt; invincibleTimeCap)
    {
        if (invincibleTime mod (room_speed / 5) == 0)
            image_alpha = !image_alpha;
        if (invincibleTime &lt;= 0)
        {
            image_alpha = 1;
            invincibleTime = invincibleTimeCap;
        }
    }
    
    if (hp &gt; 0)
    {
        var ch;
        for (var i = 0; i &lt; instance_number(obj_check); i++)
        {
            ch = instance_find(obj_check, i);
            if (x &gt;= ch.x &amp;&amp; y &lt;= ch.y)
                if (check &gt;= 0)
                {
                    if (check.x &lt; ch.x)
                        check = ch;
                }
                else check = ch;
        }
    }
    
    with (obj_end)
        if (x &lt;= other.x)
            if (room_exists(room_next(room)))
                room_goto(room_next(room));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
