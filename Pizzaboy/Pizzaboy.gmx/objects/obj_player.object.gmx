<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//xMov = 0;
//yMov = 0;
hSpd = 8;
vSpd = -3;
vGrav = 10;

hpCap = 8;
hp = hpCap;

gameTime = 0;

invincibleTimeCap = room_speed;
invincibleTime = invincibleTimeCap;

ammoCap = 3;
ammo = ammoCap;

shootTimeCap = room_speed / 8;
shootTime = shootTimeCap;

key_left = vk_left;
key_right = vk_right;
key_up = vk_up;
key_down = vk_down;
key_shoot = ord("Z");
key_shoot2 = ord("X");

deathTimeCap = room_speed * 2;
deathTime = deathTimeCap;

borderX = room_width / 6;
borderY = room_width / 6;

owner = -1;

image_speed = 1 / 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!pause)
{
    //tick until respawn
    if (deathTime &lt; deathTimeCap)
    {
        deathTime--;
        image_speed = 0;
        
        if (deathTime &lt;= 0)
        {
            owner.points = 0;
            room_restart();
        }
    }
    
    if (deathTime == deathTimeCap)
    {
        gameTime++;
        
        //controls
        var up = keyboard_check(key_up);
        var down = keyboard_check(key_down);
        
        if (up &amp;&amp; down)
        {
            up = false;
            down = false;
        }
        
        var left = keyboard_check(key_left);
        var right = keyboard_check(key_right);
        
        if (left &amp;&amp; right)
        {
            left = false;
            right = false;
        }
        
        //move
        if (up)
            y += vSpd;
        if (down)
            y += vGrav;
        y = clamp(y, borderY, room_height - round(sprite_height * 2 / 3));
        
        if (left)
            x -= hSpd;
        if (right)
            x += hSpd;
        x = clamp(x, borderX, room_width - borderX);
        
        //shoot
        if (shootTime &lt; shootTimeCap)
        {
            shootTime--;
            if (shootTime &lt;= 0)
                shootTime = shootTimeCap;
        }
        
        if (keyboard_check(key_shoot) &amp;&amp; shootTime == shootTimeCap)
        {
            var laser = instance_create(x - sprite_get_width(spr_player) / 3, y - sprite_height / 2 - sprite_get_height(spr_laser) / 3, obj_laser);;
            laser.nice = true;
            
            laser = instance_create(x + sprite_get_width(spr_player) / 3, y - sprite_height / 2 - sprite_get_height(spr_laser) / 3, obj_laser);
            laser.nice = true;
            
            shootTime--;
        }
        
        if (keyboard_check_pressed(key_shoot2) &amp;&amp; shootTime == shootTimeCap &amp;&amp; ammo &gt; 0)
        {
            var rocket = instance_create(x - sprite_get_width(spr_player) / 2 - sprite_get_width(spr_rocket) / 2, y, obj_rocket);
            rocket.nice = true;
            
            var rocket = instance_create(x + sprite_get_width(spr_player) / 2 + sprite_get_width(spr_rocket) / 2, y, obj_rocket);
            rocket.nice = true;
            
            shootTime--;
            ammo--;
        }
        
        //invincible
        if (invincibleTime &lt; invincibleTimeCap)
        {
            invincibleTime--;
            
            if (invincibleTime &lt;= 0)
                invincibleTime = invincibleTimeCap;
        }
        
        //get hit
        if (place_meeting(x, y, obj_enemy) &amp;&amp; invincibleTime == invincibleTimeCap)
        {
            var enemy = instance_place(x, y, obj_enemy);
            hp -= enemy.damage;
            audio_play_sound(snd_hit, .5, false);
            
            invincibleTime--;
        }
        
        if (place_meeting(x, y, obj_bullet) &amp;&amp; invincibleTime == invincibleTimeCap)
        {
            var b = instance_place(x, y, obj_bullet);
            if (!b.nice)
            {
                hp -= b.damage;
                audio_play_sound(snd_hit, .5, false);
                
                invincibleTime--;
            }
        }
        
        //death
        if (hp &lt;= 0)
        {
            hp = 0;
            deathTime--;
        }
        
        //pickup ammo
        if (place_meeting(x, y, obj_ammo))
        {
            var rocket = instance_place(x, y, obj_ammo);
            ammo++;
            with (rocket)
                instance_destroy();
            audio_play_sound(snd_pickup, .5, false);
        }
        
        //create enemies and ammo
        var randTime = room_speed * 10
        var rand = irandom(randTime);
        var create1 = false;
        var create2 = false;
        if (gameTime &lt; room_speed * 2)
        {
            if (rand &lt; 3)
                create1 = true;
        }
        else if (gameTime &lt; room_speed * 7)
        {
            if (rand &lt; 5)
                create1 = true;
        }
        else if (gameTime &lt; room_speed * 15)
        {
            if (rand &lt; 7)
                create1 = true;
        }
        else if (gameTime &lt; room_speed * 30)
        {
            if (rand &lt; 1)
                create2 = true;
            else if (rand &lt; 11)
                create1 = true;
        }
        else if (gameTime &lt; room_speed * 45)
        {
            if (rand &lt; 2)
                create2 = true;
            else if (rand &lt; 15)
                create1 = true;
        }
        else
        {
            if (rand &lt; 2)
                create2 = true;
            else if (rand &lt; 20)
                create1 = true;
        }
        
        if (create1)
        {
            var enemy = instance_create(irandom_range(borderX * 2 / 3, room_width - borderX * 2 / 3), -sprite_get_height(spr_enemy1) / 2, obj_enemy1);
        }
        
        if (create2)
        {
        }
        
        rand = irandom(randTime);
        if (rand &lt; 2)
            instance_create(irandom_range(borderX, room_width - borderX), -sprite_get_height(spr_rocketAmmo) / 2, obj_ammo);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invincibleTime &lt; invincibleTimeCap)
    image_alpha = .6;
else image_alpha = 1;
if (hp &lt;= 0)
    image_alpha = 0;
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
